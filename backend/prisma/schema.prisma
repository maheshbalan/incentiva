// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String?
  firstName     String?
  lastName      String?
  role          UserRole @default(PARTICIPANT)
  oauthProvider String?
  oauthId       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  campaigns     UserCampaign[]
  redemptions   CampaignRedemption[]
  createdCampaigns Campaign[] @relation("CampaignCreator")

  @@map("users")
}

model Campaign {
  id                      String   @id @default(cuid())
  name                    String
  description             String?
  startDate               DateTime
  endDate                 DateTime
  status                  CampaignStatus @default(DRAFT)
  
  // Campaign Goals
  individualGoal          Decimal? @db.Decimal(15, 2)
  individualGoalCurrency  String   @default("MXN") // MXN, USD, EUR, etc.
  overallGoal             Decimal? @db.Decimal(15, 2)
  overallGoalCurrency     String   @default("MXN")
  
  // TLP Configuration
  tlpApiKey               String?
  tlpEndpointUrl          String?
  backendConnectionConfig  Json?
  
  // Campaign Rules
  eligibilityCriteria     String? // Natural language eligibility description
  
  createdById             String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  createdBy               User     @relation("CampaignCreator", fields: [createdById], references: [id])
  rules                   CampaignRule[]
  executions              CampaignExecution[]
  schemas                 CampaignSchema[]
  userCampaigns           UserCampaign[]
  redemptions             CampaignRedemption[]
  goals                   CampaignGoal[]

  @@map("campaigns")
}

model CampaignGoal {
  id              String   @id @default(cuid())
  campaignId      String
  goalType        GoalType
  targetValue     Decimal  @db.Decimal(15, 2)
  currency        String   @default("MXN")
  description     String?
  isAchieved      Boolean  @default(false)
  achievedAt      DateTime?
  createdAt       DateTime @default(now())

  // Relations
  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_goals")
}

model CampaignRule {
  id                      String   @id @default(cuid())
  campaignId              String
  ruleType                RuleType
  ruleDefinition          Json
  generatedCode           String?
  schemaUnderstandingScore Decimal? @db.Decimal(3, 2)
  schemaFeedback          String?
  createdAt               DateTime @default(now())

  // Relations
  campaign                Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_rules")
}

model CampaignExecution {
  id              String   @id @default(cuid())
  campaignId      String
  salespersonId   String?
  regionId        String?
  pointsAllocated Int      @default(0)
  goalAchieved    Boolean  @default(false)
  executionDate   DateTime @default(now())
  
  // Execution details
  transactionAmount Decimal? @db.Decimal(15, 2)
  transactionCurrency String? @default("MXN")
  transactionType   String? // "ACCRUAL" or "REDEMPTION"

  // Relations
  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_executions")
}

model CampaignSchema {
  id                String   @id @default(cuid())
  campaignId        String
  schemaDefinition  Json
  understandingScore Decimal? @db.Decimal(3, 2)
  feedbackText      String?
  uploadedAt        DateTime @default(now())

  // Relations
  campaign          Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_schemas")
}

model UserCampaign {
  id              String   @id @default(cuid())
  userId          String
  campaignId      String
  participantId   String? // TLP member ID
  currentPoints   Int      @default(0)
  goalProgress    Decimal  @default(0) @db.Decimal(5, 2) // Percentage
  isEnrolled      Boolean  @default(true)
  enrolledAt      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([userId, campaignId])
  @@map("user_campaigns")
}

model CampaignRedemption {
  id              String   @id @default(cuid())
  campaignId      String
  userId          String
  offerId         String // TLP offer ID
  offerName       String?
  offerDescription String?
  pointsRedeemed  Int
  redemptionDate  DateTime @default(now())
  status          RedemptionStatus @default(PENDING)
  
  // Redemption details
  tlpTransactionId String? // TLP transaction reference

  // Relations
  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("campaign_redemptions")
}

model SystemConfiguration {
  id              String   @id @default(cuid())
  key             String   @unique
  value           String
  description     String?
  updatedAt       DateTime @updatedAt
  updatedBy       String?

  @@map("system_configurations")
}

model AIConfiguration {
  id              String   @id @default(cuid())
  provider        AIProvider
  modelName       String
  apiKey          String
  isActive        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("ai_configurations")
}

// Enums
enum UserRole {
  ADMIN
  PARTICIPANT
}

enum CampaignStatus {
  DRAFT
  APPROVED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum RuleType {
  GOAL
  ELIGIBILITY
  PRIZE
}

enum RedemptionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum GoalType {
  INDIVIDUAL
  OVERALL
  REGIONAL
}

enum AIProvider {
  ANTHROPIC
  OPENAI
  GOOGLE
  AZURE
} 